use sys;  -- switches which database you are currently on
drop database if exists prs;  -- deletes a database, "if exists" gives you a warning if db doesnt exist
create database prs;  
drop table users;
use prs;
create table users (
id int not null primary key auto_increment,
username varchar(30) not null unique,  -- adding "unique" to your column script makes sure sql only assigns to unique values to this column...  this can also be done after all tables are typed out. you can use (CONSTRAINT [alias] unique ([table name])) which has the benefit of assigning a name to the constraint
password varchar(30)  not null,
firstname varchar(30) not null,
lastname varchar (30) not null,
phonenumber varchar(12),
email varchar(255),
isreviewer tinyint not null default 0,  -- tinyint signifies a boolean "yes/no" type, with the default being 0 or "no"
isadmin tinyint not null default 0
-- constraint uname unique (username) example of the comment on line 8
)
;
create table vendors (
id int not null primary key auto_increment,
code varchar(10) not null unique,
name varchar(30) not null,
address varchar(30) not null,
city varchar(30) not null,
state varchar(2) not null,
zip varchar(5) not null,
phonenumber varchar(12),
email varchar(255)
)
;
create table request( -- forgot to make it plural, its standard to make tables plural
id int not null primary key auto_increment,
description varchar(80) not null,
justification varchar(80) not null,
rejectionreason varchar(80),
deliverymode varchar(20) not null default 'Pickup',
status varchar(10) not null default 'NEW',
total decimal(11,2) not null default 0,
dateneeded date not null,
submitteddate datetime not null default current_timestamp,
userid int not null,
		foreign key (userid) references users(id)
)
;
create table products(
id int not null primary key auto_increment,
partnumber varchar(30) not null unique,
name varchar(30) not null,
price decimal(11,2) not null,
unit varchar(30) not null,
photopath varchar(255), -- gives a path to a corresponding photo file
vendorid int not null,
		foreign key(vendorid) references vendors(id)
-- constraint vendor_part unique (vendorid, partnumber) 
)
;
create table lineitems( -- we dont want to put the same product twice on the same request, so we use the unique constraint making the combination of requestid and productid required to be unique
id int not null primary key auto_increment,
requestid int not null, 
	foreign key(requestid) references request(id),
productid int not null, 
	foreign key(productid) references products(id),
quantity int not null default 1,
constraint requestid_productid unique (requestid, productid)
) -- this table represents a many to many relationship, and enables it. a request can have many products in it, and a product can be under many requests
;
insert 
into users (username, password, firstname, lastname, isreviewer, isadmin) -- you can exclude id (autogenerated), you can exclude phone and email (can be null), you can exclude isadmin and isreviewer (have default values)
values ('sa', 'sa', 'System', 'Admin', 1, 1) -- sa is short for sysadmin
;
insert
into vendors (code, name, address, city, state, zip)
values ('AMAZ', 'Amazon', '1 Amazon Way', 'Seattle', 'WA', '84744'),
		('TARG', 'Target', '1 Target Way', 'Minneapolis', 'MN', '84994'),
        ('MEIJ', 'Meijer', '1 Meijer Way', 'Atlanta', 'MI', '98764')
;
insert
into requests (description, justification, dateneeded, userid)
values ('1st request', 'just because', '2021-03-01',
		(select id from users where username='sa'))
;
insert
into products (partnumber, name, price, unit, vendorid)
values ('01', 'Sega Dreamcast', 199.00, 200, 
		(select id from vendors where code='AMAZ'))
;
insert
into lineitems (requestid, productid, quantity)
values ((select id from requests where id=1), (select id from products where partnumber='01'), 3)
;